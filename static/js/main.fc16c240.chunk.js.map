{"version":3,"sources":["images/Manthan-Guru-Logo.png","components/homePageImage.js","components/footer.jsx","components/dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomepageImage","src","Manthan","style","height","width","alt","FooterPage","color","className","fluid","md","href","Date","getFullYear","Dashboard","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,+C,wLCc5BC,MAXf,WAEE,OACE,yBACEC,IAAKC,IACLC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,KAC7BC,IAAI,sB,OCgDKC,EAtDI,WACjB,OACE,kBAAC,IAAD,CAAWC,MAAM,OAAOC,UAAU,wBAChC,kBAAC,IAAD,CAAcC,OAAK,EAACD,UAAU,4BAC5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQE,GAAG,KACT,wBAAIF,UAAU,iBACZ,uBAAGG,KAAK,MAAR,WAEF,wBAAIH,UAAU,iBACZ,uBAAGG,KAAK,MAAR,WAEF,wBAAIH,UAAU,iBACZ,uBAAGG,KAAK,MAAR,YAGJ,kBAAC,IAAD,CAAQD,GAAG,KACT,4BACE,wBAAIF,UAAU,iBACZ,uBAAGG,KAAK,MAAR,WAEF,wBAAIH,UAAU,iBACZ,uBAAGG,KAAK,MAAR,WAEF,wBAAIH,UAAU,iBACZ,uBAAGG,KAAK,MAAR,aAIN,kBAAC,IAAD,CAAQD,GAAG,KACT,4BACE,wBAAIF,UAAU,iBACZ,uBAAGG,KAAK,MAAR,WAEF,wBAAIH,UAAU,iBACZ,uBAAGG,KAAK,MAAR,WAEF,wBAAIH,UAAU,iBACZ,uBAAGG,KAAK,MAAR,eAMV,yBAAKH,UAAU,qCACb,kBAAC,IAAD,CAAcC,OAAK,GAAnB,SACU,IAAIG,MAAOC,cADrB,cAC+C,IAC7C,uBAAGF,KAAK,+BAAR,yBCnBKG,MA3Bf,WAEE,OACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,8BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,4BACb,mCACO,4CADP,qBAGA,uBACEA,UAAU,WACVG,KAAK,sBACLI,OAAO,SACPC,IAAI,uBAJN,gBASF,yBAAKR,UAAU,8BACb,kBAAC,EAAD,SCVOS,MAVf,WACE,OACE,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fc16c240.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Manthan-Guru-Logo.03e2a8ac.png\";","import React from \"react\";\r\nimport Manthan from \"../images/Manthan-Guru-Logo.png\";\r\n\r\nfunction HomepageImage() {\r\n  //  const url = \"D:\\React Dev\\manthsrc\\images\\Manthan-Guru-Logo.png\";\r\n  return (\r\n    <img\r\n      src={Manthan}\r\n      style={{ height: 250, width: 800 }}\r\n      alt=\"New Company Logo\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default HomepageImage;\r\n","import React from \"react\";\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\n\r\nconst FooterPage = () => {\r\n  return (\r\n    <MDBFooter color=\"blue\" className=\"font-small pt-4 mt-4\">\r\n      <MDBContainer fluid className=\"text-center text-md-left\">\r\n        <MDBRow>\r\n          <MDBCol md=\"4\">\r\n            <li className=\"list-unstyled\">\r\n              <a href=\"#!\">Link 1</a>\r\n            </li>\r\n            <li className=\"list-unstyled\">\r\n              <a href=\"#!\">Link 2</a>\r\n            </li>\r\n            <li className=\"list-unstyled\">\r\n              <a href=\"#!\">Link 3</a>\r\n            </li>\r\n          </MDBCol>\r\n          <MDBCol md=\"4\">\r\n            <ul>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 1</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 2</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 3</a>\r\n              </li>\r\n            </ul>\r\n          </MDBCol>\r\n          <MDBCol md=\"4\">\r\n            <ul>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 1</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 2</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 3</a>\r\n              </li>\r\n            </ul>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid>\r\n          &copy; {new Date().getFullYear()} Copyright:{\" \"}\r\n          <a href=\"https://www.MDBootstrap.com\"> MDBootstrap.com </a>\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n  );\r\n};\r\n\r\nexport default FooterPage;\r\n","import React from \"react\";\r\nimport HomepageImage from \"./homePageImage\";\r\nimport FooterPage from \"./footer\";\r\n\r\nfunction Dashboard() {\r\n  //  const url = \"D:\\React Dev\\manthsrc\\images\\Manthan-Guru-Logo.png\";\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-sm-12 Dashboard-header\">\r\n        <HomepageImage />\r\n      </div>\r\n      <div className=\"col-sm-12 Dashboard-Body\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to rel.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </div>\r\n      <div className=\"col-sm-12 Dashboard-Footer\">\r\n        <FooterPage />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Dashboard from \"./components/dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Dashboard />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}